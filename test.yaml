# PIPELINE DEFINITION
# Name: model-testing-pipeline
# Description: Test model for Inference
components:
  comp-predict-on-test-data:
    executorLabel: exec-predict-on-test-data
deploymentSpec:
  executors:
    exec-predict-on-test-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - predict_on_test_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.4.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'albumentations==1.3.1'\
          \ 'torch==2.1.1' 'segmentation-models-pytorch==0.3.3' 'torchmetrics==1.2.1'\
          \ 'torchvision==0.16.1matplotlib==3.8.2' 'seaborn=0.13.0' 'numpy==1.21.0'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef predict_on_test_data():\n    import torchmetrics\n    test_set\
          \ = SegmentationDataset(mode = \"test\")\n    device = \"cuda\" if torch.cuda.is_available()\
          \ else \"cpu\"\n    batch_size = 8\n    model = UNet(in_channels = 3, out_channels\
          \ = 5).to(device)\n    model.load_state_dict(torch.load('/content/drive/MyDrive/inputs/checkpoint.pth'))\n\
          \    test_dloader = DataLoader(test_set, batch_size = batch_size)\n    scores,\
          \ acc, jaccard, avg_precision = test(model = model, test_loader = test_dloader,\
          \ device = device)\n    visualize_preds(model, test_set, title = \"Predictions_Vanilla_UNet\"\
          , h = 12, w = 12, indices = [957,961,1476,1578])\n    return scores, acc,\
          \ jaccard, avg_precision\n\n"
        image: python:3.9.0
pipelineInfo:
  description: Test model for Inference
  name: model-testing-pipeline
root:
  dag:
    tasks:
      predict-on-test-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-predict-on-test-data
        taskInfo:
          name: predict-on-test-data
schemaVersion: 2.1.0
sdkVersion: kfp-2.4.0
