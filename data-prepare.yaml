# PIPELINE DEFINITION
# Name: data-preperation-pipeline
# Description: Prepare image data
components:
  comp-prepare-data:
    executorLabel: exec-prepare-data
deploymentSpec:
  executors:
    exec-prepare-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - prepare_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.4.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.1.3'\
          \ 'numpy==1.21.0' 'opencv==4.7.0' 'matplotlib==3.8.2' 'seaborn=0.13.0' 'tifffile==2023.9.26'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef prepare_data():\n    import cv2\n    import glob\n    import\
          \ os\n    import numpy as np\n    # import gdal\n    import matplotlib.pyplot\
          \ as plt\n    import seaborn as sns\n    import regex as re\n    import\
          \ tifffile as tiff\n    from PIL import Image\n\n\n    sns.set_style(\"\
          dark\")\n\n    DATA_ROOT = \"/content/drive/MyDrive/inputs\"\n\n    IMGS_DIR\
          \ = DATA_ROOT + \"/images\"\n    MASKS_DIR = DATA_ROOT + \"/masks\"\n  \
          \  OUTPUT_DIR = DATA_ROOT + \"/output\"\n\n    TARGET_SIZE = 512\n\n   \
          \ img_paths = glob.glob(os.path.join(IMGS_DIR, \"*.tif\"))\n    mask_paths\
          \ = glob.glob(os.path.join(MASKS_DIR, \"*.tif\"))\n    print(len(img_paths))\n\
          \    print(len(mask_paths))\n    img_paths.sort()\n    mask_paths.sort()\n\
          \n    os.makedirs(OUTPUT_DIR)\n\n    for i, (img_path, mask_path) in enumerate(zip(img_paths,\
          \ mask_paths)):\n        img_filename = os.path.splitext(os.path.basename(img_path))[0]\n\
          \        mask_filename = os.path.splitext(os.path.basename(mask_path))[0]\n\
          \        img = cv2.imread(img_path)\n        mask = cv2.imread(mask_path)\n\
          \n        assert img_filename == mask_filename and img.shape[:2] == mask.shape[:2]\n\
          \n        k = 0\n        for y in range(0, img.shape[0], TARGET_SIZE):\n\
          \            for x in range(0, img.shape[1], TARGET_SIZE):\n           \
          \     img_tile = img[y:y + TARGET_SIZE, x:x + TARGET_SIZE]\n           \
          \     mask_tile = mask[y:y + TARGET_SIZE, x:x + TARGET_SIZE]\n\n       \
          \         if img_tile.shape[0] == TARGET_SIZE and img_tile.shape[1] == TARGET_SIZE:\n\
          \                    out_img_path = os.path.join(OUTPUT_DIR, \"{}_{}.jpg\"\
          .format(img_filename, k))\n                    cv2.imwrite(out_img_path,\
          \ img_tile)\n\n                    out_mask_path = os.path.join(OUTPUT_DIR,\
          \ \"{}_{}_m.png\".format(mask_filename, k))\n                    cv2.imwrite(out_mask_path,\
          \ mask_tile)\n\n                k += 1\n\n        print(\"Processed {} {}/{}\"\
          .format(img_filename, i + 1, len(img_paths)))\n        visualize_dataset(num_samples\
          \ = 8, w = 12, h = 12, pad = 1.4,\n                 save_title = \"Visualize_dataset\"\
          , indices = [0,1,29,17,11,5,6,7])\n\n"
        image: python:3.9.0
pipelineInfo:
  description: Prepare image data
  name: data-preperation-pipeline
root:
  dag:
    tasks:
      prepare-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-prepare-data
        taskInfo:
          name: prepare-data
schemaVersion: 2.1.0
sdkVersion: kfp-2.4.0
